package cmd

import (
	"fmt"
	"os"
	"path"

	"github.com/pomdtr/smallweb/client"
	"github.com/spf13/cobra"
)

var template string = `#!/bin/sh
# generated by smallweb install
exec smallweb run %s "$@"
`

func NewCmdInstall() *cobra.Command {
	var flags struct {
		force bool
	}

	cmd := &cobra.Command{
		Use:   "install",
		Short: "Install smallweb",
		Args:  cobra.ExactArgs(1),
		ValidArgsFunction: func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			if len(args) != 0 {
				return nil, cobra.ShellCompDirectiveNoFileComp
			}

			apps, err := listApps(AppKindCLI)
			if err != nil {
				return nil, cobra.ShellCompDirectiveError
			}

			return apps, cobra.ShellCompDirectiveNoFileComp
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			execPath := path.Join(client.SMALLWEB_ROOT, ".smallweb", "bin", args[0])
			if err := os.MkdirAll(path.Dir(execPath), 0755); err != nil {
				return fmt.Errorf("failed to create directory: %v", err)
			}

			if exists(execPath) && !flags.force {
				return fmt.Errorf("app already exists")
			}

			if err := os.WriteFile(execPath, []byte(fmt.Sprintf(template, args[0])), 0755); err != nil {
				return fmt.Errorf("failed to write file: %v", err)
			}

			return nil
		},
	}

	cmd.Flags().BoolVarP(&flags.force, "force", "f", false, "overwrite existing app")

	return cmd
}
